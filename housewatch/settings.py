"""
Django settings for housewatch project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import logging
import os
import sys
from datetime import timedelta
from pathlib import Path
from typing import Any, Callable, Optional

import dj_database_url
import sentry_sdk
from django.core.exceptions import ImproperlyConfigured
from kombu import Exchange, Queue
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

# TODO: Figure out why things dont work on cloud without debug
DEBUG = os.getenv("DEBUG", "false").lower() in ["true", "1"]

if "mypy" in sys.modules:
    DEBUG = True


def get_from_env(key: str, default: Any = None, *, optional: bool = False, type_cast: Optional[Callable] = None) -> Any:
    value = os.getenv(key)
    if value is None or value == "":
        if optional:
            return None
        if default is not None:
            return default
        else:
            if not DEBUG:
                raise ImproperlyConfigured(f'The environment variable "{key}" is required to run the Billing server!')
    if type_cast is not None:
        return type_cast(value)
    return value


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
TEST = False

if "pytest" in sys.modules or "mypy" in sys.modules:
    TEST = True

if DEBUG or TEST:
    SECRET_KEY = get_from_env("SECRET_KEY", "not-so-secret")
else:
    SECRET_KEY = get_from_env("SECRET_KEY")

if DEBUG:
    print("WARNING: Running debug mode!")

is_development = DEBUG and not TEST

ALLOWED_HOSTS = ["*"]

# TODO: See if we can enable this to be more limited - K8s health checks will fail if the below is uncommented
# ALLOWED_HOSTS = [
#     "housewatch.posthog.com",
#     "housewatch.dev.posthog.dev",
#     "127.0.0.1",
#     "localhost",
# ]

SECURE_SSL_REDIRECT = False
if not DEBUG and not TEST:
    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

SITE_URL = get_from_env("SITE_URL", "http://localhost:8100").rstrip("/")


CSRF_TRUSTED_ORIGINS = ["https://*.posthog.dev", "https://*.posthog.com"]
CORS_ORIGIN_ALLOW_ALL = True


APPEND_SLASH = False


# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",  # makes sure that whitenoise handles static files in development
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "housewatch.apps.HouseWatchConfig",
    "rest_framework",
    "corsheaders",
]


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = get_from_env("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY", optional=True)

if SOCIAL_AUTH_GOOGLE_OAUTH2_KEY:
    SOCIAL_AUTH_JSONFIELD_ENABLED = True
    SOCIAL_AUTH_REDIRECT_IS_HTTPS = "http://" not in SITE_URL
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = get_from_env("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")
    SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = ["posthog.com"]
    SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ["email"]
    LOGIN_URL = "/login/google-oauth2/"


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "social_core.backends.google.GoogleOAuth2",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "housewatch.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "housewatch.wsgi.application"



DATABASE_URL = get_from_env("DATABASE_URL")



if DATABASE_URL:
    DATABASES = {"default": dj_database_url.config(default=DATABASE_URL, conn_max_age=600)}
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'housewatch.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Django REST Framework
# https://github.com/encode/django-rest-framework/

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.BasicAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
    ],

    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_PERMISSION_CLASSES": [],
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "PAGE_SIZE": 100,
    "EXCEPTION_HANDLER": "exceptions_hog.exception_handler",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# See https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# DRF Exceptions Hog
# https://github.com/PostHog/drf-exceptions-hog#readme
# EXCEPTIONS_HOG = {
#     "EXCEPTION_REPORTING": "housewatch.utils.exception_reporter",
# }

EVENT_USAGE_CACHING_TTL = get_from_env("EVENT_USAGE_CACHING_TTL", 12 * 60 * 60, type_cast=int)


if TEST or DEBUG:
    REDIS_URL = get_from_env("REDIS_URL", "redis://localhost:6380")
else:
    REDIS_URL = get_from_env("REDIS_URL")


# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": REDIS_URL,
#         "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
#         "KEY_PREFIX": "posthog",
#     }
# }

# if TEST:
#     CACHES["default"] = {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"}
CACHES = {
    "default": {"BACKEND": "django.core.cache.backends.locmem.LocMemCache"}
}


# Only listen to the default queue "celery", unless overridden via the CLI
CELERY_QUEUES = (Queue("celery", Exchange("celery"), "celery"),)
CELERY_DEFAULT_QUEUE = "celery"
CELERY_IMPORTS = []  # type: ignore
CELERY_BROKER_URL = REDIS_URL  # celery connects to redis
CELERY_BEAT_MAX_LOOP_INTERVAL = 30  # sleep max 30sec before checking for new periodic events
CELERY_RESULT_BACKEND = REDIS_URL  # stores results for lookup when processing
CELERY_IGNORE_RESULT = True  # only applies to delay(), must do @shared_task(ignore_result=True) for apply_async
CELERY_RESULT_EXPIRES = timedelta(days=4)  # expire tasks after 4 days instead of the default 1
REDBEAT_LOCK_TIMEOUT = 45  # keep distributed beat lock for 45sec

if TEST:
    import celery

    celery.current_app.conf.task_always_eager = True
    celery.current_app.conf.task_eager_propagates = True

if TEST or DEBUG:
    STRIPE_API_KEY = get_from_env("STRIPE_API_KEY", "stripe_12345678")
    STRIPE_ACTIVATION_PRICE_ID = get_from_env("STRIPE_ACTIVATION_PRICE_ID", "price_1234567")
    STRIPE_WEBHOOK_SECRET = get_from_env("STRIPE_WEBHOOK_SECRET", "wh_1234567")
    MAILGUN_API_KEY = get_from_env("MAILGUN_API_KEY", "mg_1234567")
    REVENUE_API_KEY = get_from_env("REVENUE_API_KEY", "api-key")
else:
    STRIPE_API_KEY = get_from_env("STRIPE_API_KEY")
    STRIPE_ACTIVATION_PRICE_ID = get_from_env("STRIPE_ACTIVATION_PRICE_ID")
    STRIPE_WEBHOOK_SECRET = get_from_env("STRIPE_WEBHOOK_SECRET")

    MAILGUN_API_KEY = get_from_env("MAILGUN_API_KEY")
    REVENUE_API_KEY = get_from_env("REVENUE_API_KEY", optional=True)


STRIPE_API_VERSION = get_from_env("STRIPE_API_VERSION", "2022-08-01")

POSTHOG_PROJECT_API_KEY = get_from_env("POSTHOG_PROJECT_API_KEY", "123456789")


def sentry_init() -> None:
    if not TEST and os.getenv("SENTRY_DSN"):
        sentry_sdk.utils.MAX_STRING_LENGTH = 10_000_000
        # https://docs.sentry.io/platforms/python/
        sentry_logging = LoggingIntegration(level=logging.INFO, event_level=None)
        sentry_sdk.init(
            dsn=os.environ["SENTRY_DSN"],
            environment=os.getenv("SENTRY_ENVIRONMENT", "production"),
            integrations=[DjangoIntegration(), CeleryIntegration(), sentry_logging],
            request_bodies="always",
            sample_rate=1.0,
            # Configures the sample rate for error events, in the range of 0.0 to 1.0. The default is 1.0 which means that 100% of error events are sent. If set to 0.1 only 10% of error events will be sent. Events are picked randomly.
            send_default_pii=True,
        )


sentry_init()
